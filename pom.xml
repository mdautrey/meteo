<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- https://github.com/spring-guides/gs-consuming-rest -->

    <!-- https://maven.apache.org/guides/mini/guide-naming-conventions.html
    groupId will identify your project uniquely across all projects, so we need to enforce a naming schema.
    It has to follow the package name rules, what means that has to be at least as a domain name you control, -
    and you can create as many subgroups as you want
    -->

    <groupId>meteo</groupId>

    <!--
    artifactId is the name of the jar without version. If you created it then you can choose
    whatever name you want with lowercase letters and no strange symbols.
    If it's a third party jar you have to take the name of the jar as it's distributed.-->

    <artifactId>meteo</artifactId>
    <version>0.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.5.RELEASE</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!-- http://www.technologies-ebusiness.com/langages/comment-construire-backend-rest-spring-boot
        Spring Boot nous apporte toute la puissance du framework Spring bien connu des développeurs Java,
        ainsi qu’un Tomcat embarqué et une documentation de référence expliquant clairement comment déployer
        une telle application dans le nuage, sur une plateforme telle que Heroku.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <!-- http://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview.html
        The Web layer consists of the spring-web, spring-webmvc, spring-websocket, and spring-webmvc-portlet modules.
        The spring-web module provides basic web-oriented integration features such as multipart file upload
        functionality and the initialization of the IoC container using Servlet listeners and a web-oriented
        application context. It also contains an HTTP client and the web-related parts of Spring’s remoting support.
        The spring-webmvc module (also known as the Web-Servlet module) contains Spring’s model-view-controller (MVC)
        and REST Web Services implementation for web applications. Spring’s MVC framework provides a clean separation
        between domain model code and web forms and integrates with all of the other features of the Spring Framework.
        The spring-webmvc-portlet module (also known as the Web-Portlet module) provides the MVC implementation to be
        used in a Portlet environment and mirrors the functionality of the spring-webmvc module.
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <!-- https://github.com/FasterXML/jackson-databind
        General data-binding package for Jackson (2.x): works on streaming API (core) implementation(s)
        http://wiki.fasterxml.com/JacksonHome
        Inspired by the quality and variety of XML tooling available for the Java platform (StAX, JAXB, etc.),
        the Jackson is a multi-purpose Java library for processing JSON data format. Jackson aims to be the
        best possible combination of fast, correct, lightweight, and ergonomic for developers.
        -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>
    </dependencies>

    <build>
        <!-- http://www.tutorialspoint.com/maven/maven_plugins.htm
        Maven is actually a plugin execution framework where every task is actually done by plugins.
        Maven Plugins are generally used to :
        create jar file
        create war file
        compile code files
        unit testing of code
        create project documentation
        create project reports
        -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <!-- http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html
                The Spring Boot Maven Plugin provides Spring Boot support in Maven, allowing you to package
                executable jar or war archives and run an application “in-place”.
                To use it you must be using Maven 3.2 (or better).
                -->
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>